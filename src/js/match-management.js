let currentTab = 'matches';

async function loadAllMatches() {
    await Promise.all([
        loadMatches(),
        loadBlockedUsers(),
        loadUnmatchedUsers()
    ]);
}

async function loadMatches() {
    try {
        const response = await fetch(`${API_URL}/matches`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            const matches = await response.json();
            renderMatchList(matches);
        }
    } catch (error) {
        console.error('Error loading matches:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch b·∫°n b√®');
    }
}

function renderMatchList(matches) {
    const container = document.getElementById('matchesContainer');
    if (!container) return;

    container.innerHTML = '';

    matches.forEach(match => {
        const otherUser = match.sender._id === localStorage.getItem('userId') 
            ? match.receiver 
            : match.sender;

        const card = document.createElement('div');
        card.className = 'match-card';
        card.innerHTML = `
            <img src="${otherUser.avatar || DEFAULT_AVATAR}" 
                alt="Avatar" 
                class="clickable-avatar">
            <h3>${otherUser.name}</h3>
            <div class="match-actions">
                <button class="btn-chat" onclick="goToChat('${otherUser._id}')">
                    <i class="btn-icon">üí¨</i>
                    Nh·∫Øn tin
                </button>
                <button class="btn-unmatch" onclick="unmatchUser('${otherUser._id}', '${otherUser.name}')">
                    <i class="btn-icon">üíî</i>
                    H·ªßy k·∫øt n·ªëi
                </button>
                <button class="btn-block" onclick="blockUser('${otherUser._id}', '${otherUser.name}')">
                    <i class="btn-icon">üö´</i>
                    Ch·∫∑n
                </button>
            </div>
        `;

        card.querySelector('.clickable-avatar').addEventListener('click', () => {
            window.location.href = `user-profile.html?id=${otherUser._id}`;
        });

        container.appendChild(card);
    });
}

function goToChat(userId) {
    window.location.href = `chat.html?userId=${userId}`;
}

async function unmatchUser(userId, userName) {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy k·∫øt n·ªëi v·ªõi ${userName}?`)) return;

    try {
        const response = await fetch(`${API_URL}/matches/unmatch`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ userId })
        });

        if (response.ok) {
            alert('ƒê√£ h·ªßy k·∫øt n·ªëi th√†nh c√¥ng');
            loadAllMatches();
        } else {
            const data = await response.json();
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error unmatching user:', error);
        alert(error.message || 'C√≥ l·ªói x·∫£y ra khi h·ªßy k·∫øt n·ªëi');
    }
}

async function blockUser(userId, userName) {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ch·∫∑n ${userName}?`)) return;

    try {
        const response = await fetch(`${API_URL}/matches/block`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ userId })
        });

        if (response.ok) {
            alert('ƒê√£ ch·∫∑n ng∆∞·ªùi d√πng th√†nh c√¥ng');
            loadAllMatches();
        } else {
            const data = await response.json();
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error blocking user:', error);
        alert(error.message || 'C√≥ l·ªói x·∫£y ra khi ch·∫∑n ng∆∞·ªùi d√πng');
    }
}

async function loadBlockedUsers() {
    try {
        const response = await fetch(`${API_URL}/matches/status/blocked`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            const blockedUsers = await response.json();
            renderBlockedUsers(blockedUsers);
        }
    } catch (error) {
        console.error('Error loading blocked users:', error);
    }
}

async function loadUnmatchedUsers() {
    try {
        const response = await fetch(`${API_URL}/matches/status/rejected`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (response.ok) {
            const unmatchedUsers = await response.json();
            renderUnmatchedUsers(unmatchedUsers);
        }
    } catch (error) {
        console.error('Error loading unmatched users:', error);
    }
}

function renderBlockedUsers(users) {
    const container = document.getElementById('blockedContainer');
    if (!container) return;

    container.innerHTML = '';

    users.forEach(match => {
        const card = document.createElement('div');
        card.className = 'match-card';
        card.innerHTML = `
            <img src="${match.otherUser.avatar || DEFAULT_AVATAR}" 
                alt="Avatar" 
                class="clickable-avatar">
            <h3>${match.otherUser.name}</h3>
            <div class="match-actions">
                <button class="btn-unblock" onclick="unblockUser('${match.otherUser._id}', '${match.otherUser.name}')">
                    <i class="btn-icon">üîì</i>
                    B·ªè ch·∫∑n
                </button>
            </div>
        `;

        container.appendChild(card);
    });
}

function renderUnmatchedUsers(users) {
    const container = document.getElementById('unmatchedContainer');
    if (!container) return;

    container.innerHTML = '';

    users.forEach(match => {
        const card = document.createElement('div');
        card.className = 'match-card';
        card.innerHTML = `
            <img src="${match.otherUser.avatar || DEFAULT_AVATAR}" 
                alt="Avatar" 
                class="clickable-avatar">
            <h3>${match.otherUser.name}</h3>
            <div class="match-actions">
                <button class="btn-rematch" onclick="rematchUser('${match.otherUser._id}', '${match.otherUser.name}')">
                    <i class="btn-icon">üíù</i>
                    K·∫øt n·ªëi l·∫°i
                </button>
            </div>
        `;

        container.appendChild(card);
    });
}

async function unblockUser(userId, userName) {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën b·ªè ch·∫∑n ${userName}?`)) return;

    try {
        const response = await fetch(`${API_URL}/matches/unblock`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ userId })
        });

        if (response.ok) {
            alert('ƒê√£ b·ªè ch·∫∑n ng∆∞·ªùi d√πng');
            loadAllMatches();
        }
    } catch (error) {
        console.error('Error unblocking user:', error);
        alert('C√≥ l·ªói x·∫£y ra khi b·ªè ch·∫∑n ng∆∞·ªùi d√πng');
    }
}

async function rematchUser(userId, userName) {
    if (!confirm(`B·∫°n c√≥ mu·ªën k·∫øt n·ªëi l·∫°i v·ªõi ${userName}?`)) return;

    try {
        const response = await fetch(`${API_URL}/matches/rematch`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: JSON.stringify({ userId })
        });

        if (response.ok) {
            alert('ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt n·ªëi');
            loadAllMatches();
        }
    } catch (error) {
        console.error('Error rematching user:', error);
        alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i l·ªùi m·ªùi k·∫øt n·ªëi');
    }
}

// Tab switching
document.querySelectorAll('.tab-btn').forEach(button => {
    button.addEventListener('click', () => {
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        button.classList.add('active');
        const tabId = button.dataset.tab;
        document.getElementById(tabId).classList.add('active');
        currentTab = tabId;
    });
});

// Th√™m c√°c h√†m v√†o window object ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ onclick
window.goToChat = goToChat;
window.unmatchUser = unmatchUser;
window.blockUser = blockUser;
window.unblockUser = unblockUser;
window.rematchUser = rematchUser;

// Initialize
document.addEventListener('DOMContentLoaded', loadAllMatches);

// Th√™m CSS
const matchStyle = document.createElement('style');
matchStyle.textContent = `
    .clickable-avatar {
        cursor: pointer;
        transition: transform 0.2s;
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
    }

    .clickable-avatar:hover {
        transform: scale(1.1);
    }
`;
document.head.appendChild(matchStyle);